{"version":3,"sources":["Components/RangeSlider/index.jsx","Components/TurnoverRate/index.js","Components/Button/index.js","Components/ResultBox/index.js","Components/SplitPane/\bindex.js","Components/Input/index.js","Layouts/FormLayout/index.js","Components/FormSignUp/index.jsx","services/validator.js","Components/ToolContent/index.js","App.js","serviceWorker.js","index.js"],"names":["RangeSlider","min","max","defaultValue","label","step","onChange","tooltipText","useState","tooltipVisible","setTooltipVisible","value","setValue","handleOnChange","marksTemp","style","fontSize","fontWeight","color","marks","className","placement","title","overlayClassName","span","onAfterChange","TurnoverRate","state","begin","end","leaving","key","setState","rate","props","handleTurnOverRate","toFixed","marginBottom","marginRight","this","Component","ButtonGrove","type","ResultBox","href","target","rel","sectionBorderStyle","borderRadius","border","backgroundColor","padding","SplitPane","left","right","InputFiled","name","values","handleChange","errors","placeholder","touched","handleBlur","onBlur","FormLayout","handleSubmit","onSubmit","Signup","validate","handleDone","setValues","setErrors","email","setTouched","evt","rest","error","e","preventDefault","formValidation","Object","keys","reduce","acc","newError","newTouched","length","every","t","validation","fieldName","fieldValue","trim","test","validator","ToolContent","App","setRate","done","setDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wZAkFeA,EA/EK,SAAC,GAQd,IAPLC,EAOI,EAPJA,IACAC,EAMI,EANJA,IACAC,EAKI,EALJA,aACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YACI,EACwCC,mBAA0B,IAAjBL,GADjD,mBACGM,EADH,KACmBC,EADnB,OAEsBF,mBAASL,GAF/B,mBAEGQ,EAFH,KAEUC,EAFV,KAGEC,EAAiB,SAACF,GACtBD,GAAkB,GAClBE,EAASD,GACTL,EAASK,IAELG,EAAY,GAClBA,EAAU,GAAD,OAAIb,IAAS,CACpBc,MAAO,CACLC,SAAU,OACVC,WAAY,OACZC,MAAO,WAETd,MAAO,8BAAOH,IAEhBa,EAAU,GAAD,OAAIZ,IAAS,CACpBa,MAAO,CACLC,SAAU,OACVC,WAAY,OACZC,MAAO,WAETd,MAAO,8BAAOF,IAEhB,IAAMiB,EAAK,eAAQL,GAInB,OACE,yBAAKM,UAAU,yBACb,yBAAKA,UAAU,SACb,2BAAIhB,GACJ,kBAAC,IAAD,CACEiB,UAAU,MACVC,MAAOf,EACPgB,iBAAiB,gBAEjB,uBAAGH,UAAU,QAAb,YAGJ,yBAAKA,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,KAAM,IACT,kBAAC,IAAD,CACEvB,IAAKA,EACLC,IAAKA,EACLC,aAAcA,EACdE,KAAMA,EACNC,SAAUO,EACVJ,eAAgBA,EAChBU,MAAOA,EACPM,cA1BgB,SAACd,KA2BjBA,MAAOA,EACPS,UAAU,wBAGd,kBAAC,IAAD,CAAKI,KAAM,GACT,kBAAC,IAAD,CACEvB,IAAKA,EACLC,IAAKA,EACLS,MAAOA,EACPL,SAAUO,SCtEHa,G,mNACnBC,MAAQ,CACNC,MAAO,EACPC,IAAK,EACLC,QAAS,G,EAEXjB,eAAiB,SAACkB,GAAD,OAAS,SAACpB,GACzB,EAAKqB,SAAL,eAEKD,EAAMpB,IAET,WAAO,IAAD,EAC4B,EAAKgB,MAA7BC,EADJ,EACIA,MAAOC,EADX,EACWA,IACXI,EAFA,EACgBH,UACIF,EAAQC,GAAO,GAAM,IAC7C,EAAKK,MAAMC,mBAAmBF,EAAKG,QAAQ,S,uDAK/C,OACE,6BACE,yBAAKhB,UAAU,gBAAgBL,MAAO,CAAEsB,aAAc,SACpD,0BAAMjB,UAAU,iBAAiBL,MAAO,CAAEuB,YAAa,SAAvD,UAGA,0BAAMlB,UAAU,iBAAhB,4BAEF,kBAAC,EAAD,CACEnB,IAAK,EACLC,IAAK,IACLG,KAAM,EACNF,aAAc,EACdC,MAAM,gCACNG,YAAY,gCACZD,SAAUiC,KAAK1B,eAAe,WAEhC,kBAAC,EAAD,CACEZ,IAAK,EACLC,IAAK,IACLG,KAAM,EACNF,aAAc,EACdC,MAAM,6BACNG,YAAY,6BACZD,SAAUiC,KAAK1B,eAAe,SAEhC,kBAAC,EAAD,CACEZ,IAAK,EACLC,IAAK,IACLG,KAAM,EACNF,aAAc,EACdC,MAAM,8BACNG,YAAY,8BACZD,SAAUiC,KAAK1B,eAAe,kB,GApDE2B,cCQ3BC,G,cARK,SAACP,GACnB,OACE,4BAAQQ,KAAMR,EAAMQ,KAAMtB,UAAU,kBACjCc,EAAM9B,SCeEuC,EAlBG,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACnB,OACE,yBAAKb,UAAU,cACb,kEACA,uBAAGA,UAAU,eAAea,EAA5B,KACA,0FACA,uBACEW,KAAK,qCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,EAAD,CAAa1C,MAAM,aAAasC,KAAK,YAEvC,uBAAGtB,UAAU,SAAb,kCCbA2B,G,OAAqB,CACzBC,aAAc,MACdC,OAAQ,oBACRC,gBAAiB,UACjBC,QAAS,SAuBIC,EArBG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACE,yBAAKlC,UAAU,sBAAsBL,MAAO,CAAEsB,aAAc,SACzDgB,EACC,yBAAKjC,UAAU,iBAAiBL,MAAOgC,GACpCM,GAGH,GAEDC,EACC,yBAAKlC,UAAU,kBAAkBL,MAAOgC,GACrCO,GAGH,K,gBCUOC,G,OAhCI,SAAC,GASb,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,aACAC,EAKI,EALJA,OACAvD,EAII,EAJJA,MACAwD,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,WAEA,OACE,yBAAK1C,UAAU,aACb,+BAAQhB,EAAR,MACA,yBAAKgB,UAAU,+BACb,2BACEA,UAAU,YACVsB,KAAK,OACLkB,YAAaA,EACbJ,KAAMA,EACNlD,SAAUoD,EACV/C,MAAO8C,EAAO,GAAD,OAAID,IACjBO,OAAQD,IAEV,0BAAM1C,UAAU,gBACd,8BAGJ,+BAAQyC,EAAQ,GAAD,OAAIL,KAAWG,EAAO,GAAD,OAAIH,QCiB/BQ,EA1CI,SAAC,GAOb,IANLL,EAMI,EANJA,OACAG,EAKI,EALJA,WACAJ,EAII,EAJJA,aACAO,EAGI,EAHJA,aACAR,EAEI,EAFJA,OACAI,EACI,EADJA,QAEA,OACE,yBAAKzC,UAAU,oBACb,wBAAIL,MAAO,CAAEsB,aAAc,UAA3B,yDAGA,0BAAM6B,SAAUD,GACd,yBAAKlD,MAAO,CAAEsB,aAAc,SAC1B,kBAAC,EAAD,CACEjC,MAAM,OACNwD,YAAY,YACZF,aAAcA,EACdI,WAAYA,EACZL,OAAQA,EACRE,OAAQA,EACRE,QAASA,EACTL,KAAK,SAEP,kBAAC,EAAD,CACEpD,MAAM,QACNwD,YAAY,sBACZF,aAAcA,EACdI,WAAYA,EACZL,OAAQA,EACRE,OAAQA,EACRH,KAAK,QACLK,QAASA,KAGb,kBAAC,EAAD,CAAazD,MAAM,YAAYsC,KAAK,cCsD7ByB,EAzFA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAAiB,EACf7D,mBAAS,IADM,mBACpCiD,EADoC,KAC5Ba,EAD4B,OAEf9D,mBAAS,IAFM,mBAEpCmD,EAFoC,KAE5BY,EAF4B,OAGb/D,mBAAS,CAAEgD,MAAM,EAAOgB,OAAO,IAHlB,mBAGpCX,EAHoC,KAG3BY,EAH2B,KA2E3C,OACE,oCACE,kBAAC,EAAD,CACEX,WAxDa,SAACY,GAAS,IAAD,EACFA,EAAI7B,OAApBW,EADkB,EAClBA,KAAM7C,EADY,EACZA,MAGmBgE,GAAShB,EAAjCH,GAJiB,YAIgBG,EAJhB,CAIjBH,GAJiB,WAOpBoB,EAAQR,EAAS,GAAD,OAAIZ,IAAQ7C,GAGlC4D,EAAU,2BACLI,GACCC,GAAK,eAAOpB,EAAOK,EAAQL,IAASoB,MA6CtClB,aA1Ee,SAACmB,GAAO,IAAD,EACJA,EAAEhC,OAAlBW,EADoB,EACpBA,KAAM7C,EADc,EACdA,MAGZ2D,EAAU,2BACLb,GADI,kBAEND,EAAO7C,KAIV8D,EAAW,2BACNZ,GADK,kBAEPL,GAAO,MA+DNS,aAzCe,SAACY,GACpBA,EAAEC,iBAGF,IAAMC,EAAiBC,OAAOC,KAAKxB,GAAQyB,QACzC,SAACC,EAAKpD,GACJ,IAAMqD,EAAWhB,EAASrC,GAAK0B,EAAO1B,IAChCsD,EAAU,eAAMtD,GAAM,GAC5B,MAAO,CACL4B,OAAO,2BACFwB,EAAIxB,QACHyB,GAAQ,eAAOrD,EAAMqD,IAE3BvB,QAAQ,2BACHsB,EAAItB,SACJwB,MAIT,CACE1B,OAAO,eAAMA,GACbE,QAAQ,eAAMA,KAGlBU,EAAUQ,EAAepB,QACzBc,EAAWM,EAAelB,UAGvBmB,OAAOvB,OAAOsB,EAAepB,QAAQ2B,QACtCN,OAAOvB,OAAOsB,EAAelB,SAASyB,SACpCN,OAAOvB,OAAOA,GAAQ6B,QACxBN,OAAOvB,OAAOsB,EAAelB,SAAS0B,OAAM,SAACC,GAAD,OAAa,IAANA,MAEnDnB,GAAW,IASTZ,OAAQA,EACRE,OAAQA,EACRE,QAASA,MCxFX4B,EAAa,SAACC,EAAWC,GAE7B,MAA0B,KAAtBA,EAAWC,OACN,0BAES,UAAdF,GAJK,4JAKCG,KAAKF,GAER,KAF4B,uCAUtBG,EALG,CAChBtC,KAAM,SAACA,GAAD,OAAUiC,EAAW,OAAQjC,IACnCgB,MAAO,SAACA,GAAD,OAAWiB,EAAW,QAASjB,KCwCzBuB,G,OAnDK,WAClB,OACE,yBAAK3E,UAAU,oBACb,yBAAKL,MAAO,CAAEsB,aAAc,SAC1B,uBAAGjB,UAAU,uBAAb,mCACA,uBAAGA,UAAU,sBAAb,qNAIE,6BACA,6BALF,gWAaA,uBAAGA,UAAU,2BACX,0BAAMA,UAAU,QAAhB,UADF,+FAIA,uBAAGA,UAAU,2BACX,0BAAMA,UAAU,QAAhB,UADF,+FAIA,uBAAGA,UAAU,2BACX,0BAAMA,UAAU,QAAhB,UADF,gGAKF,6BACE,uBAAGA,UAAU,uBAAb,mCACA,uBAAGA,UAAU,sBAAb,qNAIE,6BACA,6BALF,oWCCO4E,EA3BH,WAAM,MAEQxF,mBAAS,GAFjB,mBAETyB,EAFS,KAEHgE,EAFG,OAGQzF,oBAAS,GAHjB,mBAGT0F,EAHS,KAGHC,EAHG,KAUhB,OACE,yBAAK/E,UAAU,OACb,kBAAC,EAAD,CACEiC,KAAM,kBAAC,EAAD,CAAclB,mBATC,SAACxB,GAC1BsF,EAAQtF,MASJ2C,MACG4C,EAGC,kBAAC,EAAD,CAAWjE,KAAMA,IAFjB,kBAAC,EAAD,CAAQmC,SAAU0B,EAAWzB,WATpB,SAAC1D,GAClBwF,EAAQxF,QAcN,kBAAC,EAAD,CAAW0C,KAAM,kBAAC,EAAD,MAAiBC,MAAM,OCnB1B8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,a","file":"static/js/main.52e6cbf6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./RangeSlider.css\";\nimport { Slider, Tooltip, Row, Col, InputNumber } from \"antd\";\nconst RangeSlider = ({\n  min,\n  max,\n  defaultValue,\n  label,\n  step,\n  onChange,\n  tooltipText,\n}) => {\n  const [tooltipVisible, setTooltipVisible] = useState(defaultValue !== 0);\n  const [value, setValue] = useState(defaultValue);\n  const handleOnChange = (value) => {\n    setTooltipVisible(true);\n    setValue(value);\n    onChange(value);\n  };\n  const marksTemp = {};\n  marksTemp[`${min}`] = {\n    style: {\n      fontSize: \"13px\",\n      fontWeight: \" 500\",\n      color: \"#698194\",\n    },\n    label: <span>{min}</span>,\n  };\n  marksTemp[`${max}`] = {\n    style: {\n      fontSize: \"13px\",\n      fontWeight: \" 500\",\n      color: \"#698194\",\n    },\n    label: <span>{max}</span>,\n  };\n  const marks = { ...marksTemp };\n  const handleOnAfterChange = (value) => {\n    //Fire when onmouseup is fired\n  };\n  return (\n    <div className=\"rangeSlider-contianer\">\n      <div className=\"label\">\n        <p>{label}</p>\n        <Tooltip\n          placement=\"top\"\n          title={tooltipText}\n          overlayClassName=\"icon-tooltip\"\n        >\n          <i className=\"icon\">î¬»</i>\n        </Tooltip>\n      </div>\n      <div className=\"input-range\">\n        <Row>\n          <Col span={20}>\n            <Slider\n              min={min}\n              max={max}\n              defaultValue={defaultValue}\n              step={step}\n              onChange={handleOnChange}\n              tooltipVisible={tooltipVisible}\n              marks={marks}\n              onAfterChange={handleOnAfterChange}\n              value={value}\n              className=\"input-range-slider\"\n            />\n          </Col>\n          <Col span={4}>\n            <InputNumber\n              min={min}\n              max={max}\n              value={value}\n              onChange={handleOnChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default RangeSlider;\n","import React, { Component } from \"react\";\nimport RangeSlider from \"../RangeSlider\";\nimport \"./TurnoverRate.css\";\nexport default class TurnoverRate extends Component {\n  state = {\n    begin: 0,\n    end: 0,\n    leaving: 0,\n  };\n  handleOnChange = (key) => (value) => {\n    this.setState(\n      {\n        [key]: value,\n      },\n      () => {\n        const { begin, end, leaving } = this.state;\n        let rate = (leaving / ((begin + end) / 2)) * 100;\n        this.props.handleTurnOverRate(rate.toFixed(1));\n      }\n    );\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"turnover-rate\" style={{ marginBottom: \"40px\" }}>\n          <span className=\"icon user-icon\" style={{ marginRight: \"18px\" }}>\n            î°\n          </span>\n          <span className=\"section-title\">Employee Turnover Rate </span>\n        </div>\n        <RangeSlider\n          min={0}\n          max={2000}\n          step={1}\n          defaultValue={0}\n          label=\"Beginning number of employees\"\n          tooltipText=\"Beginning number of employees\"\n          onChange={this.handleOnChange(\"begin\")}\n        />\n        <RangeSlider\n          min={0}\n          max={2000}\n          step={1}\n          defaultValue={0}\n          label=\"Ending number of employees\"\n          tooltipText=\"Ending number of employees\"\n          onChange={this.handleOnChange(\"end\")}\n        />\n        <RangeSlider\n          min={0}\n          max={2000}\n          step={1}\n          defaultValue={0}\n          label=\"Leaving number of employees\"\n          tooltipText=\"Leaving number of employees\"\n          onChange={this.handleOnChange(\"leaving\")}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst ButtonGrove = (props) => {\n  return (\n    <button type={props.type} className=\"button-primary\">\n      {props.label}\n    </button>\n  );\n};\n\nexport default ButtonGrove;\n","import React from \"react\";\nimport \"./ResultBox.css\";\nimport ButtonGrove from \"../Button\";\nconst ResultBox = ({ rate }) => {\n  return (\n    <div className=\"result-box\">\n      <h2>Here is your Annual Turnover Rate </h2>\n      <p className=\"rate-result\">{rate}%</p>\n      <p>Reduce your turnover rate with our employee-first platform </p>\n      <a\n        href=\"https://portal.grovehr.com/sign-up\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <ButtonGrove label=\"Signup now\" type=\"button\" />\n      </a>\n      <p className=\"quote\">Itâs 100% free, forever</p>\n    </div>\n  );\n};\n\nexport default ResultBox;\n","import React from \"react\";\n\nimport \"./SplitPane.css\";\nconst sectionBorderStyle = {\n  borderRadius: \"4px\",\n  border: \"solid 1px #e3ebf1\",\n  backgroundColor: \"#ffffff\",\n  padding: \"32px\",\n};\nconst SplitPane = ({ left, right }) => {\n  return (\n    <div className=\"splitpane-container\" style={{ marginBottom: \"32px\" }}>\n      {left ? (\n        <div className=\"splitpane-left\" style={sectionBorderStyle}>\n          {left}\n        </div>\n      ) : (\n        \"\"\n      )}\n      {right ? (\n        <div className=\"splitpane-right\" style={sectionBorderStyle}>\n          {right}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default SplitPane;\n","import React from \"react\";\nimport \"./Input.css\";\nconst InputFiled = ({\n  name,\n  values,\n  handleChange,\n  errors,\n  label,\n  placeholder,\n  touched,\n  handleBlur,\n}) => {\n  return (\n    <div className=\"input-wrp\">\n      <label>{label} *</label>\n      <div className=\" input-control input-effect\">\n        <input\n          className=\"effect-20\"\n          type=\"text\"\n          placeholder={placeholder}\n          name={name}\n          onChange={handleChange}\n          value={values[`${name}`]}\n          onBlur={handleBlur}\n        />\n        <span className=\"focus-border\">\n          <i />\n        </span>\n      </div>\n      <small>{touched[`${name}`] && errors[`${name}`]}</small>\n    </div>\n  );\n};\n\nexport default InputFiled;\n","import React from \"react\";\nimport ButtonGrove from \"../../Components/Button\";\nimport InputFiled from \"../../Components/Input\";\n\nconst FormLayout = ({\n  errors,\n  handleBlur,\n  handleChange,\n  handleSubmit,\n  values,\n  touched,\n}) => {\n  return (\n    <div className=\"signup-container\">\n      <h3 style={{ marginBottom: \"16px;\" }}>\n        Calculate Your Customer Lifetime Value In 30 Seconds!\n      </h3>\n      <form onSubmit={handleSubmit}>\n        <div style={{ marginBottom: \"24px\" }}>\n          <InputFiled\n            label=\"Name\"\n            placeholder=\"Your name\"\n            handleChange={handleChange}\n            handleBlur={handleBlur}\n            values={values}\n            errors={errors}\n            touched={touched}\n            name=\"name\"\n          />\n          <InputFiled\n            label=\"Email\"\n            placeholder=\"example@company.com\"\n            handleChange={handleChange}\n            handleBlur={handleBlur}\n            values={values}\n            errors={errors}\n            name=\"email\"\n            touched={touched}\n          />\n        </div>\n        <ButtonGrove label=\"Calculate\" type=\"submit\" />\n      </form>\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import React, { useState } from \"react\";\nimport \"../../Layouts/FormLayout\";\n\nimport FormLayout from \"../../Layouts/FormLayout\";\n\nconst Signup = ({ validate, handleDone }) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({ name: false, email: false });\n  // OnChange Handler\n  const handleChange = (e) => {\n    let { name, value } = e.target;\n\n    //Save field values\n    setValues({\n      ...values,\n      [name]: value,\n    });\n\n    // Was the field modified\n    setTouched({\n      ...touched,\n      [name]: true,\n    });\n  };\n\n  // Handle onBlur\n  const handleBlur = (evt) => {\n    const { name, value } = evt.target;\n\n    // remove whatever error was there previously\n    const { [name]: removedError, ...rest } = errors;\n\n    // check for a new error\n    const error = validate[`${name}`](value);\n\n    // // validate the field if the value has been touched\n    setErrors({\n      ...rest,\n      ...(error && { [name]: touched[name] && error }),\n    });\n  };\n\n  //OnSubmit Handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //validate the form\n    const formValidation = Object.keys(values).reduce(\n      (acc, key) => {\n        const newError = validate[key](values[key]);\n        const newTouched = { [key]: true };\n        return {\n          errors: {\n            ...acc.errors,\n            ...(newError && { [key]: newError }),\n          },\n          touched: {\n            ...acc.touched,\n            ...newTouched,\n          },\n        };\n      },\n      {\n        errors: { ...errors },\n        touched: { ...touched },\n      }\n    );\n    setErrors(formValidation.errors);\n    setTouched(formValidation.touched);\n\n    if (\n      !Object.values(formValidation.errors).length && // errors object is empty\n      Object.values(formValidation.touched).length ===\n        Object.values(values).length && // all fields were touched\n      Object.values(formValidation.touched).every((t) => t === true) // every touched field is true\n    ) {\n      handleDone(true);\n    }\n  };\n  return (\n    <>\n      <FormLayout\n        handleBlur={handleBlur}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        values={values}\n        errors={errors}\n        touched={touched}\n      />\n    </>\n  );\n};\n\nexport default Signup;\n","const validation = (fieldName, fieldValue) => {\n  let re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (fieldValue.trim() === \"\") {\n    return \"This field is required.\";\n  }\n  if (fieldName === \"email\") {\n    if (!re.test(fieldValue)) return \"Please enter a valid email address.\";\n  }\n  return null;\n};\n\nconst validator = {\n  name: (name) => validation(\"name\", name),\n  email: (email) => validation(\"email\", email),\n};\n\nexport default validator;\n","import React from \"react\";\nimport \"./ToolContent.css\";\nconst ToolContent = () => {\n  return (\n    <div className=\"tool-content-wrp\">\n      <div style={{ marginBottom: \"40px\" }}>\n        <p className=\"tool-content__title\">What is Employee Turnover Rate?</p>\n        <p className=\"tool-content__main\">\n          Employee turnover rate (also known as attrition rate, or exit rate) is\n          an HR metric used to measure the number of employees that leave your\n          company over a period (usually a monthly, quarterly, or annual basis).\n          <br />\n          <br />\n          This metric includes voluntary resignations, retirements, dismissals,\n          and more during the set period. A high turnover rate is viewed\n          negatively for many reasons. It could indicate you have a bad\n          workplace culture or show that you have a flawed recruitment process.\n          Knowing your turnover rate can benefit your company in many ways. It\n          allows you to:\n        </p>\n        <p className=\"tool-content__main-item\">\n          <span className=\"icon\">î£</span>Measure the effectiveness of your\n          recruitment process and make adjustments to hire most-fit\n        </p>\n        <p className=\"tool-content__main-item\">\n          <span className=\"icon\">î£</span>Measure the effectiveness of your\n          recruitment process and make adjustments to hire most-fit\n        </p>\n        <p className=\"tool-content__main-item\">\n          <span className=\"icon\">î£</span>Measure the effectiveness of your\n          recruitment process and make adjustments to hire most-fit\n        </p>\n      </div>\n      <div>\n        <p className=\"tool-content__title\">What is Employee Turnover Rate?</p>\n        <p className=\"tool-content__main\">\n          Employee turnover rate (also known as attrition rate, or exit rate) is\n          an HR metric used to measure the number of employees that leave your\n          company over a period (usually a monthly, quarterly, or annual basis).\n          <br />\n          <br />\n          This metric includes voluntary resignations, retirements, dismissals,\n          and more during the set period. A high turnover rate is viewed\n          negatively for many reasons. It could indicate you have a bad\n          workplace culture or show that you have a flawed recruitment process.\n          Knowing your turnover rate can benefit your company in many ways. It\n          allows you to:\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ToolContent;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TurnoverRate from \"./Components/TurnoverRate\";\nimport ResultBox from \"./Components/ResultBox\";\nimport SplitPane from \"./Components/SplitPane/\bindex\";\nimport Signup from \"./Components/FormSignUp\";\nimport validator from \"./services/validator\";\nimport ToolContent from \"./Components/ToolContent\";\n\nconst App = () => {\n  // Rate is turnover rate\n  const [rate, setRate] = useState(0);\n  const [done, setDone] = useState(false);\n  const handleTurnOverRate = (value) => {\n    setRate(value);\n  };\n  const handleDone = (value) => {\n    setDone(value);\n  };\n  return (\n    <div className=\"App\">\n      <SplitPane\n        left={<TurnoverRate handleTurnOverRate={handleTurnOverRate} />}\n        right={\n          !done ? (\n            <Signup validate={validator} handleDone={handleDone} />\n          ) : (\n            <ResultBox rate={rate} />\n          )\n        }\n      />\n      <SplitPane left={<ToolContent />} right=\"\" />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}